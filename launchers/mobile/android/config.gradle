ext.versions = [
    androidGradlePlugin: "7.4.2",
    compileSdk         : 33,
    minSdk             : 26,
    targetSdk          : 31,
    buildTools         : "30.0.3",
    kotlinVersion      : "1.6.21",
    fragmentVersion    : "1.3.6",
    appcompatVersion   : "1.4.0",
    nexusPublishVersion: "1.1.0",
    javaVersion        : 17,
    ndkVersion         : "25.1.8937393"
]

ext.libraries = [
    androidGradlePlugin: "com.android.tools.build:gradle:$versions.androidGradlePlugin",
    kotlinGradlePlugin : "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlinVersion",
    kotlinStdLib       : "org.jetbrains.kotlin:kotlin-stdlib:$versions.kotlinVersion",
    androidxFragment   : "androidx.fragment:fragment:$versions.fragmentVersion",
    androidxAppcompat  : "androidx.appcompat:appcompat:$versions.appcompatVersion",
]

// Project export values

/**
 * Parse the project properties for the 'custom_build_mode' property and return
 * it for turning on custom build mode.
 */
ext.getCustomBuildMode = { ->
    // Retrieve the custom_build_mode from the project property set by the Crossbow build command.
    return project.hasProperty("custom_build_mode") ? project.property("custom_build_mode") : false
}

ext.getExportVersionCode = { ->
    String versionCode = project.hasProperty("export_version_code") ? project.property("export_version_code") : ""
    if (versionCode == null || versionCode.isEmpty()) {
        versionCode = "1"
    }
    try {
        return Integer.parseInt(versionCode)
    } catch (NumberFormatException ignored) {
        return 1
    }
}

ext.getExportVersionName = { ->
    String versionName = project.hasProperty("export_version_name") ? project.property("export_version_name") : ""
    if (versionName == null || versionName.isEmpty()) {
        versionName = "1.0"
    }
    return versionName
}

ext.getExportMinSdkVersion = { ->
    String minSdkVersion = project.hasProperty("export_version_min_sdk") ? project.property("export_version_min_sdk") : ""
    if (minSdkVersion == null || minSdkVersion.isEmpty()) {
        minSdkVersion = "$versions.minSdk"
    }
    try {
        return Integer.parseInt(minSdkVersion)
    } catch (NumberFormatException ignored) {
        return versions.minSdk
    }
}

ext.getExportTargetSdkVersion = { ->
    String targetSdkVersion = project.hasProperty("export_version_target_sdk") ? project.property("export_version_target_sdk") : ""
    if (targetSdkVersion == null || targetSdkVersion.isEmpty()) {
        targetSdkVersion = "$versions.targetSdk"
    }
    try {
        return Integer.parseInt(targetSdkVersion)
    } catch (NumberFormatException ignored) {
        return versions.targetSdk
    }
}
